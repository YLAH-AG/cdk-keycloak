"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegTestingExistingVpcSubnets = exports.IntegTesting = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk = require("aws-cdk-lib");
const index_1 = require("./index");
class IntegTesting {
    constructor() {
        const app = new cdk.App();
        const env = {
            region: process.env.CDK_DEFAULT_REGION || 'us-east-1',
            account: process.env.CDK_DEFAULT_ACCOUNT,
        };
        const stack = new cdk.Stack(app, 'keycloak-demo', { env });
        // create a default keycloak workload with minimal required props
        new index_1.KeyCloak(stack, 'KeyCloak', {
            certificateArn: stack.node.tryGetContext('ACM_CERT_ARN') || 'MOCK_ARN',
            keycloakVersion: index_1.KeycloakVersion.V15_0_2,
            auroraServerless: true,
            nodeCount: 2,
            autoScaleTask: {
                min: 2,
                max: 10,
                targetCpuUtilization: 60,
            },
        });
        this.stack = [stack];
    }
}
exports.IntegTesting = IntegTesting;
class IntegTestingExistingVpcSubnets {
    constructor() {
        const app = new cdk.App();
        const env = {
            region: process.env.CDK_DEFAULT_REGION,
            account: process.env.CDK_DEFAULT_ACCOUNT,
        };
        const stack = new cdk.Stack(app, 'keycloak-demo', { env });
        new index_1.KeyCloak(stack, 'KeyCloak', {
            certificateArn: stack.node.tryGetContext('ACM_CERT_ARN') || 'MOCK_ARN',
            keycloakVersion: index_1.KeycloakVersion.V15_0_2,
            vpc: aws_cdk_lib_1.aws_ec2.Vpc.fromLookup(stack, 'Vpc', { vpcId: 'vpc-0417e46d' }),
            publicSubnets: {
                subnets: [
                    aws_cdk_lib_1.aws_ec2.Subnet.fromSubnetId(stack, 'pub-1a', 'subnet-5bbe7b32'),
                    aws_cdk_lib_1.aws_ec2.Subnet.fromSubnetId(stack, 'pub-1b', 'subnet-0428367c'),
                    aws_cdk_lib_1.aws_ec2.Subnet.fromSubnetId(stack, 'pub-1c', 'subnet-1586a75f'),
                ],
            },
            privateSubnets: {
                subnets: [
                    aws_cdk_lib_1.aws_ec2.Subnet.fromSubnetId(stack, 'priv-1a', 'subnet-0e9460dbcfc4cf6ee'),
                    aws_cdk_lib_1.aws_ec2.Subnet.fromSubnetId(stack, 'priv-1b', 'subnet-0562f666bdf5c29af'),
                    aws_cdk_lib_1.aws_ec2.Subnet.fromSubnetId(stack, 'priv-1c', 'subnet-00ab15c0022872f06'),
                ],
            },
            databaseSubnets: {
                subnets: [
                    aws_cdk_lib_1.aws_ec2.Subnet.fromSubnetId(stack, 'db-1a', 'subnet-0e9460dbcfc4cf6ee'),
                    aws_cdk_lib_1.aws_ec2.Subnet.fromSubnetId(stack, 'db-1b', 'subnet-0562f666bdf5c29af'),
                    aws_cdk_lib_1.aws_ec2.Subnet.fromSubnetId(stack, 'db-1c', 'subnet-00ab15c0022872f06'),
                ],
            },
        });
        this.stack = [stack];
    }
}
exports.IntegTestingExistingVpcSubnets = IntegTestingExistingVpcSubnets;
new IntegTesting();
// new IntegTestingExistingVpcSubnets();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWcuZGVmYXVsdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnRlZy5kZWZhdWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUVxQjtBQUNyQixtQ0FBbUM7QUFFbkMsbUNBQW9EO0FBRXBELE1BQWEsWUFBWTtJQUV2QjtRQUNFLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRTFCLE1BQU0sR0FBRyxHQUFHO1lBQ1YsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLElBQUksV0FBVztZQUNyRCxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUI7U0FDekMsQ0FBQztRQUVGLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUUzRCxpRUFBaUU7UUFDakUsSUFBSSxnQkFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7WUFDOUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxJQUFJLFVBQVU7WUFDdEUsZUFBZSxFQUFFLHVCQUFlLENBQUMsT0FBTztZQUN4QyxnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLFNBQVMsRUFBRSxDQUFDO1lBQ1osYUFBYSxFQUFFO2dCQUNiLEdBQUcsRUFBRSxDQUFDO2dCQUNOLEdBQUcsRUFBRSxFQUFFO2dCQUNQLG9CQUFvQixFQUFFLEVBQUU7YUFDekI7U0FDRixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztDQUNGO0FBM0JELG9DQTJCQztBQUdELE1BQWEsOEJBQThCO0lBRXpDO1FBQ0UsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFMUIsTUFBTSxHQUFHLEdBQUc7WUFDVixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0I7WUFDdEMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CO1NBQ3pDLENBQUM7UUFFRixNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFM0QsSUFBSSxnQkFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7WUFDOUIsY0FBYyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxJQUFJLFVBQVU7WUFDdEUsZUFBZSxFQUFFLHVCQUFlLENBQUMsT0FBTztZQUN4QyxHQUFHLEVBQUUscUJBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLENBQUM7WUFDaEUsYUFBYSxFQUFFO2dCQUNiLE9BQU8sRUFBRTtvQkFDUCxxQkFBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQztvQkFDM0QscUJBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsaUJBQWlCLENBQUM7b0JBQzNELHFCQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixDQUFDO2lCQUM1RDthQUNGO1lBQ0QsY0FBYyxFQUFFO2dCQUNkLE9BQU8sRUFBRTtvQkFDUCxxQkFBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSwwQkFBMEIsQ0FBQztvQkFDckUscUJBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxTQUFTLEVBQUUsMEJBQTBCLENBQUM7b0JBQ3JFLHFCQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsU0FBUyxFQUFFLDBCQUEwQixDQUFDO2lCQUN0RTthQUNGO1lBQ0QsZUFBZSxFQUFFO2dCQUNmLE9BQU8sRUFBRTtvQkFDUCxxQkFBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSwwQkFBMEIsQ0FBQztvQkFDbkUscUJBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsMEJBQTBCLENBQUM7b0JBQ25FLHFCQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLDBCQUEwQixDQUFDO2lCQUNwRTthQUNGO1NBQ0YsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQXhDRCx3RUF3Q0M7QUFFRCxJQUFJLFlBQVksRUFBRSxDQUFDO0FBRW5CLHdDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGF3c19lYzIgYXMgZWMyLFxufSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuXG5pbXBvcnQgeyBLZXlDbG9haywgS2V5Y2xvYWtWZXJzaW9uIH0gZnJvbSAnLi9pbmRleCc7XG5cbmV4cG9ydCBjbGFzcyBJbnRlZ1Rlc3Rpbmcge1xuICByZWFkb25seSBzdGFjazogY2RrLlN0YWNrW107XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbiAgICBjb25zdCBlbnYgPSB7XG4gICAgICByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB8fCAndXMtZWFzdC0xJyxcbiAgICAgIGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsXG4gICAgfTtcblxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdrZXljbG9hay1kZW1vJywgeyBlbnYgfSk7XG5cbiAgICAvLyBjcmVhdGUgYSBkZWZhdWx0IGtleWNsb2FrIHdvcmtsb2FkIHdpdGggbWluaW1hbCByZXF1aXJlZCBwcm9wc1xuICAgIG5ldyBLZXlDbG9hayhzdGFjaywgJ0tleUNsb2FrJywge1xuICAgICAgY2VydGlmaWNhdGVBcm46IHN0YWNrLm5vZGUudHJ5R2V0Q29udGV4dCgnQUNNX0NFUlRfQVJOJykgfHwgJ01PQ0tfQVJOJyxcbiAgICAgIGtleWNsb2FrVmVyc2lvbjogS2V5Y2xvYWtWZXJzaW9uLlYxNV8wXzIsXG4gICAgICBhdXJvcmFTZXJ2ZXJsZXNzOiB0cnVlLFxuICAgICAgbm9kZUNvdW50OiAyLFxuICAgICAgYXV0b1NjYWxlVGFzazoge1xuICAgICAgICBtaW46IDIsXG4gICAgICAgIG1heDogMTAsXG4gICAgICAgIHRhcmdldENwdVV0aWxpemF0aW9uOiA2MCxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB0aGlzLnN0YWNrID0gW3N0YWNrXTtcbiAgfVxufVxuXG5cbmV4cG9ydCBjbGFzcyBJbnRlZ1Rlc3RpbmdFeGlzdGluZ1ZwY1N1Ym5ldHMge1xuICByZWFkb25seSBzdGFjazogY2RrLlN0YWNrW107XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbiAgICBjb25zdCBlbnYgPSB7XG4gICAgICByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTixcbiAgICAgIGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsXG4gICAgfTtcblxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjayhhcHAsICdrZXljbG9hay1kZW1vJywgeyBlbnYgfSk7XG5cbiAgICBuZXcgS2V5Q2xvYWsoc3RhY2ssICdLZXlDbG9haycsIHtcbiAgICAgIGNlcnRpZmljYXRlQXJuOiBzdGFjay5ub2RlLnRyeUdldENvbnRleHQoJ0FDTV9DRVJUX0FSTicpIHx8ICdNT0NLX0FSTicsXG4gICAgICBrZXljbG9ha1ZlcnNpb246IEtleWNsb2FrVmVyc2lvbi5WMTVfMF8yLFxuICAgICAgdnBjOiBlYzIuVnBjLmZyb21Mb29rdXAoc3RhY2ssICdWcGMnLCB7IHZwY0lkOiAndnBjLTA0MTdlNDZkJyB9KSxcbiAgICAgIHB1YmxpY1N1Ym5ldHM6IHtcbiAgICAgICAgc3VibmV0czogW1xuICAgICAgICAgIGVjMi5TdWJuZXQuZnJvbVN1Ym5ldElkKHN0YWNrLCAncHViLTFhJywgJ3N1Ym5ldC01YmJlN2IzMicpLFxuICAgICAgICAgIGVjMi5TdWJuZXQuZnJvbVN1Ym5ldElkKHN0YWNrLCAncHViLTFiJywgJ3N1Ym5ldC0wNDI4MzY3YycpLFxuICAgICAgICAgIGVjMi5TdWJuZXQuZnJvbVN1Ym5ldElkKHN0YWNrLCAncHViLTFjJywgJ3N1Ym5ldC0xNTg2YTc1ZicpLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHByaXZhdGVTdWJuZXRzOiB7XG4gICAgICAgIHN1Ym5ldHM6IFtcbiAgICAgICAgICBlYzIuU3VibmV0LmZyb21TdWJuZXRJZChzdGFjaywgJ3ByaXYtMWEnLCAnc3VibmV0LTBlOTQ2MGRiY2ZjNGNmNmVlJyksXG4gICAgICAgICAgZWMyLlN1Ym5ldC5mcm9tU3VibmV0SWQoc3RhY2ssICdwcml2LTFiJywgJ3N1Ym5ldC0wNTYyZjY2NmJkZjVjMjlhZicpLFxuICAgICAgICAgIGVjMi5TdWJuZXQuZnJvbVN1Ym5ldElkKHN0YWNrLCAncHJpdi0xYycsICdzdWJuZXQtMDBhYjE1YzAwMjI4NzJmMDYnKSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICBkYXRhYmFzZVN1Ym5ldHM6IHtcbiAgICAgICAgc3VibmV0czogW1xuICAgICAgICAgIGVjMi5TdWJuZXQuZnJvbVN1Ym5ldElkKHN0YWNrLCAnZGItMWEnLCAnc3VibmV0LTBlOTQ2MGRiY2ZjNGNmNmVlJyksXG4gICAgICAgICAgZWMyLlN1Ym5ldC5mcm9tU3VibmV0SWQoc3RhY2ssICdkYi0xYicsICdzdWJuZXQtMDU2MmY2NjZiZGY1YzI5YWYnKSxcbiAgICAgICAgICBlYzIuU3VibmV0LmZyb21TdWJuZXRJZChzdGFjaywgJ2RiLTFjJywgJ3N1Ym5ldC0wMGFiMTVjMDAyMjg3MmYwNicpLFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLnN0YWNrID0gW3N0YWNrXTtcbiAgfVxufVxuXG5uZXcgSW50ZWdUZXN0aW5nKCk7XG5cbi8vIG5ldyBJbnRlZ1Rlc3RpbmdFeGlzdGluZ1ZwY1N1Ym5ldHMoKTtcblxuIl19